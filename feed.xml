<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bob Maerten — Blog Perso</title>
  <subtitle>Humeurs, interrogations, pâtisseries, développement web, systèmes Linux et autres curiosités</subtitle>
  <id>https://bobmaerten.eu/blog</id>
  <link href="https://bobmaerten.eu/blog"/>
  <link href="https://bobmaerten.eu/blog/feed.xml" rel="self"/>
  <updated>2016-02-06T14:38:57+01:00</updated>
  <author>
    <name>Bob Maerten</name>
  </author>
  <entry>
    <title>Une image docker de base légère pour rails5</title>
    <link rel="alternate" href="https://bobmaerten.eu/blog/une-image-docker-de-base-legere-pour-rails5.html"/>
    <id>https://bobmaerten.eu/blog/une-image-docker-de-base-legere-pour-rails5.html</id>
    <published>2016-02-06T14:38:57+01:00</published>
    <updated>2016-02-06T22:15:32+01:00</updated>
    <author>
      <name>Bob Maerten — Blog Perso</name>
    </author>
    <content type="html">&lt;p&gt;Une des bonnes pratiques pour la construction d&amp;#39;images docker est de minimiser leur taille et en particulier d&amp;#39;avoir le moins de &amp;ldquo;couche&amp;rdquo; possible. D&amp;#39;ailleurs, il y a quelques jours, Docker a &lt;a href="https://www.brianchristner.io/docker-is-moving-to-alpine-linux/"&gt;annoncé la migration de ses images officielles&lt;/a&gt; de la distribution ubuntu à alpine-linux pour réduire au maximum le volume de données utiles. Parmi ces images, c&amp;#39;est &lt;a href="https://hub.docker.com/_/ruby/"&gt;&lt;code&gt;ruby:alpine&lt;/code&gt;&lt;/a&gt; qui m&amp;#39;intéresse particulièrement, et c&amp;#39;était l&amp;#39;occasion rêvée d&amp;#39;expérimenter la création d&amp;#39;une image d&amp;#39;une application de base pour rails 5.0.0-beta2.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Il faut dire que l&amp;#39;image officielle de rails n&amp;#39;est pas des plus légère :&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker images | grep rails
rails   latest   efa7b55d5f4d   9 days ago   826.4 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;#39;idée est donc de partir de l&amp;#39;image officielle ruby-alpine qui a également l&amp;#39;avantage de fournir la version 2.3 de ruby.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM ruby:2.3-alpine
MAINTAINER bob.maerten@gmail.com

COPY Gemfile Gemfile.lock /app/
WORKDIR /app

RUN \
    # Install ruby packages needed for runtime
    apk add --no-cache \
      nodejs \
      postgresql-client \
      libgcrypt \
      libxml2 \
      libxslt \
      tzdata \
    # Install ruby packages needed for native gems building
 &amp;amp;&amp;amp; apk add --no-cache --virtual build-dependencies \
      build-base \
      postgresql-dev \
      libc-dev \
      curl-dev \
      qt-dev \
      libxml2-dev \
      libxslt-dev \
      linux-headers \
    # Configure bundler to use system libxml libraries at compile time
 &amp;amp;&amp;amp; bundle config build.nokogiri --use-system-libraries \
    # Install default rails5 gems
 &amp;amp;&amp;amp; bundle install --without development test \
    # Remove native gem building dependencies to ease weight on docker image
 &amp;amp;&amp;amp; apk del build-dependencies \
    # Also remove cache to gain even more
 &amp;amp;&amp;amp; rm -rf /var/cache/apk/*

ADD . /app
RUN chown -R nobody:nogroup /app
USER nobody
ENV RAILS_ENV production

CMD  ["bundle", "exec", "rails", "server", "-b", "0.0.0.0"]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reste plus qu&amp;#39;à construire cette image :&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker build -t rails5-alpine-base .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour constater une jolie économie :&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker images | grep rails
rails5-alpine-base  latest  fab4676a469a  2 minutes ago  216.1 MB
rails               latest  efa7b55d5f4d  9 days ago     826.4 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et pourtant fonctionnelle, pour peu qu&amp;#39;on lui associe une base postgres, comme avec ce &lt;em&gt;compose file&lt;/em&gt; :&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgres:
  image: postgres:9.5
  environment:
    POSTGRES_USER: railsapp
    POSTGRES_PASSWORD: railsapp

web:
  image: bobmaerten:rails5-alpine-base
  links:
    - postgres
  ports:
    - '3000:3000'
  environment:
    RAILS_ENV: development
    DATABASE_URL: "postgresql://railsapp:railsapp@postgres/railsapp?pool=5"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et de lancer la &lt;em&gt;stack&lt;/em&gt; avec la commande :&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et voila notre application rails de base disponible !&lt;/p&gt;

&lt;p&gt;&lt;img alt="Ruby on Rails 5" src="blog/une-image-docker-de-base-legere-pour-rails5/Ruby_on_Rails-ad72eb85.png" /&gt;&lt;/p&gt;

&lt;p&gt;Bon, évidemment il ne s&amp;#39;agit là que de l&amp;#39;application nue, et il est fort probable que pour chaque nouvelle gem ajoutée à notre &lt;code&gt;Gemfile&lt;/code&gt; une &lt;em&gt;lib&lt;/em&gt; manquera à l&amp;#39;appel et il faudra spécialiser l&amp;#39;image en reprenant le &lt;em&gt;process&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pour ce faire, il est donc possible de créer un autre &lt;code&gt;Dockerfile&lt;/code&gt; qui hérite de notre image de base et reprendre l&amp;#39;ajout de &lt;em&gt;packages&lt;/em&gt; nécessaires à la compilation des gems natives, un peu comme cet exemple :&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM bobmaerten:rails5-alpine-base
MAINTAINER bob.maerten@gmail.com

# switch to root to install packages
USER root
RUN set -x \
  &amp;amp;&amp;amp; apk add --no-cache \
        #  &amp;lt;insert packages needed for runtime here&amp;gt; \
        bash \
 &amp;amp;&amp;amp; apk add --no-cache --virtual .gems-builddeps \
        # &amp;lt;insert packages needed for native gem buiding here&amp;gt; \
        build-base \
        postgresql-dev \
        libc-dev \
        curl-dev \
        qt-dev \
        libxml2-dev \
        libxslt-dev \
        linux-headers \
   &amp;amp;&amp;amp; rm -rf /var/cache/apk/*

COPY Gemfile /app/
COPY Gemfile.lock /app/
RUN bundle install

# Remove gems building packages deps
RUN apk del .gems-builddeps

# switch back to default user to run app
USER nobody
COPY . /app

CMD  ["bundle", "exec", "rails", "server", "-b", "0.0.0.0"]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mais cela me fait poser la question de l&amp;#39;intérêt de sous-classer plutôt que de profiter du système de cache de docker et de reprendre la création de l&amp;#39;image quasiment à sa base (alpine:3.3).&lt;/p&gt;

&lt;p&gt;Je ne pense pas avoir assez de recul ni sur cette problématique ni sur l&amp;#39;usage au quotidien de rails avec docker pour répondre à cette question. Mais si vous avez un avis la dessus (en attendant un retour prochain des commentaires), n&amp;#39;hésitez pas à ma le partager via les réseaux sociaux, ou par mail si vous préférez plus d&amp;rsquo;&amp;lsquo;intimité, après un passage sur &lt;a href="https://keybase.io/bobmaerten"&gt;keybase.io&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Un certificat Let's Encrypt toujours à jour sur le blog avec Docker</title>
    <link rel="alternate" href="https://bobmaerten.eu/blog/un-certificat-let-s-encrypt-toujours-a-jour-sur-le-blog-avec-docker.html"/>
    <id>https://bobmaerten.eu/blog/un-certificat-let-s-encrypt-toujours-a-jour-sur-le-blog-avec-docker.html</id>
    <published>2016-01-27T09:08:09+01:00</published>
    <updated>2016-01-27T14:22:24+01:00</updated>
    <author>
      <name>Bob Maerten — Blog Perso</name>
    </author>
    <content type="html">&lt;p&gt;Depuis l&amp;#39;année dernière ce blog répond exclusivement en HTTPS grâce à un certificat valide et reconnu, issu d&amp;#39;une &lt;a href="https://www.wosign.com"&gt;autorité de certification chinoise&lt;/a&gt; qui propose (proposait ?) des certificats gratuits. Mais depuis, &lt;a href="https://letsencrypt.org"&gt;Let&amp;rsquo;s encrypt&lt;/a&gt; est disponible en béta publique et je cherchais depuis quelques jours un moyen de l&amp;#39;inclure dans la &lt;em&gt;stack&lt;/em&gt; d&amp;#39;hébergement de ce blog et permettre la création et le renouvellement automatique de certificat SSL, comme il est promis dans la documentation.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;Contexte&lt;/h2&gt;

&lt;p&gt;Ce blog est servi au travers de deux conteneurs Docker:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;un issu de l&amp;#39;image officielle &lt;a href="http://hub.docker.com/_/nginx"&gt;nginx&lt;/a&gt; sur laquelle j&amp;#39;y ajoute le &lt;a href="http://github.com/bobmaerten/bobmaerten.eu"&gt;contenu statique&lt;/a&gt; ;&lt;/li&gt;
&lt;li&gt;un autre exécutant l&amp;#39;image du &lt;a href="http://hub.docker.com/r/jwilder/nginx-proxy"&gt;reverse-proxy nginx&lt;/a&gt; de &lt;a href="http://jasonwilder.com/"&gt;Jason Wilder&lt;/a&gt; permettant d&amp;#39;uniformiser la configuration des différents sites et d&amp;#39;aiguiller vers le bon conteneur.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il ne manquait plus qu&amp;#39;un dernier conteneur qui assurerait la gestion et le suivi des certificats issus de Let&amp;rsquo;s Encrypt. Mais j&amp;#39;avais beau essayer d&amp;#39;utiliser le client officiel de différente manières, il y a toujours une étape ou le client doit se substituer au serveur web réel pour répondre au challenge proposé par les serveurs de Let&amp;rsquo;s Encrypt, afin de valider la demande de certificat.&lt;/p&gt;

&lt;p&gt;Heureusement, nous évoluons dans une sphère libre ! Il existe dès lors &lt;a href="https://www.metachris.com/2015/12/comparison-of-10-acme-lets-encrypt-clients/"&gt;moultes implémentations&lt;/a&gt; légèrement différentes du client officiel. Et c&amp;#39;est avec l&amp;#39;une de ces implémentations qu&amp;rsquo;&lt;a href="https://github.com/JrCs"&gt;Yves Blusseau&lt;/a&gt; a eu l&amp;#39;excellente idée d&amp;rsquo;&lt;a href="https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion"&gt;implémenter ce que je cherchais à faire&lt;/a&gt; : un conteneur qui fait tourner un client lets-encrypt, pilotant automatiquement la configuration du reverse-proxy pour la réponse au challenge du serveur et assurant la gestion des certificats, en incluant tout cela dans la configuration de nginx.&lt;/p&gt;

&lt;h2&gt;Bon et techniquement, ça donne quoi ?&lt;/h2&gt;

&lt;p&gt;Donc voici les commandes qui me permettent de lancer la &lt;em&gt;stack&lt;/em&gt; de ce blog&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Démarrage du reverse-proxy nginx&lt;/span&gt;
docker run --name nginx-proxy &lt;span class="se"&gt;\&lt;/span&gt;
  -p 80:80 -p 443:443 &lt;span class="se"&gt;\&lt;/span&gt;
  -v /home/bob/certs:/etc/nginx/certs:ro &lt;span class="se"&gt;\&lt;/span&gt;
  -v /etc/nginx/vhost.d &lt;span class="se"&gt;\&lt;/span&gt;
  -v /usr/share/nginx/html &lt;span class="se"&gt;\&lt;/span&gt;
  -v /var/run/docker.sock:/tmp/docker.sock:ro &lt;span class="se"&gt;\&lt;/span&gt;
  --restart&lt;span class="o"&gt;=&lt;/span&gt;always &lt;span class="se"&gt;\&lt;/span&gt;
  --detach jwilder/nginx-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le conteneur accède au répertoire de l&amp;#39;hôte pour les certificats ainsi que sur le socket du &lt;em&gt;daemon&lt;/em&gt; Docker, car il a besoin de récupérer les metadonnées des conteneurs (notamment la variable VIRTUAL_HOST, voir ci-dessous). Deux volumes sur &lt;code&gt;/etc/nginx/vhost.d&lt;/code&gt; et &lt;code&gt;/usr/share/nginx/html&lt;/code&gt; sont déclarés car ils seront utilisés par le conteneur lets-encrypt.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Démarrage du conteneur de gestion des certificats et de la conf nginx&lt;/span&gt;
docker run --name letsencrypt-companion &lt;span class="se"&gt;\&lt;/span&gt;
  -v /home/bob/certs:/etc/nginx/certs:rw &lt;span class="se"&gt;\&lt;/span&gt;
  --volumes-from nginx-proxy &lt;span class="se"&gt;\&lt;/span&gt;
  -v /var/run/docker.sock:/var/run/docker.sock:ro &lt;span class="se"&gt;\&lt;/span&gt;
  --restart&lt;span class="o"&gt;=&lt;/span&gt;always &lt;span class="se"&gt;\&lt;/span&gt;
  --detach jrcs/letsencrypt-nginx-proxy-companion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ici le répertoire des certificats est monté en écriture et il sera partagé (sur l&amp;#39;hôte) avec le reverse-proxy. Ce conteneur utilise les volumes déclarés dans le reverse-proxy (&lt;code&gt;volumes-from&lt;/code&gt;) ainsi que l&amp;#39;accès au socket du &lt;em&gt;daemon&lt;/em&gt; Docker également (pour lire les variables d&amp;#39;environnement déclarées sur les conteneurs “client”).&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Démarrage du conteneur du blog&lt;/span&gt;
docker run --name bobmaerten-eu &lt;span class="se"&gt;\&lt;/span&gt;
   -e      &lt;span class="nv"&gt;VIRTUAL_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"bobmaerten.eu"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   -e  &lt;span class="nv"&gt;LETSENCRYPT_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"bobmaerten.eu"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   -e &lt;span class="nv"&gt;LETSENCRYPT_EMAIL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"hello@bobmaerten.eu"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --restart&lt;span class="o"&gt;=&lt;/span&gt;always &lt;span class="se"&gt;\&lt;/span&gt;
   --detach bobmaerten/bobmaerten.eu:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enfin, le conteneur qui sert le blog, ou je déclare les variables d&amp;#39;environnement qui seront utilisées pour la configuration du reverse-proxy (VIRTUAL_HOST) et du client lets-encrypt.&lt;/p&gt;

&lt;p&gt;Au démarrage de la &lt;em&gt;stack&lt;/em&gt;, le reverse-proxy détecte le VIRTUAL_HOST &lt;code&gt;bobmaerten.eu&lt;/code&gt; et crée dynamiquement l&amp;#39;entrée &lt;code&gt;server&lt;/code&gt; dans la configuration de nginx, et le client lets-encrypt modifie également dynamiquement la configuration du reverse-proxy si un certificat est échu ou renouvelé.&lt;/p&gt;

&lt;p&gt;Je vous laisse le soin d&amp;#39;aller explorer les différents dépôts respectifs à cette &lt;em&gt;stack&lt;/em&gt; si vous êtes curieux du &lt;em&gt;comment-ça-marche-sous-le-capot&lt;/em&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Utiliser la virtualisation native d'OSX pour Docker</title>
    <link rel="alternate" href="https://bobmaerten.eu/blog/utiliser-la-virtualisation-native-d-osx-pour-docker.html"/>
    <id>https://bobmaerten.eu/blog/utiliser-la-virtualisation-native-d-osx-pour-docker.html</id>
    <published>2016-01-23T15:16:10+01:00</published>
    <updated>2016-01-25T09:05:32+01:00</updated>
    <author>
      <name>Bob Maerten — Blog Perso</name>
    </author>
    <content type="html">&lt;p&gt;Docker est un outil linux natif et pour l&amp;#39;utiliser sous OSX (ou Windows) il faut passer par une machine virtuelle sous linux pour faire tourner le &lt;em&gt;daemon&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pour cela, la pratique courante est d&amp;#39;installer un hyperviseur (habituellement Virtualbox) afin de faire tourner &lt;code&gt;boot2docker&lt;/code&gt;, la micro-VM fournie par Docker afin de l&amp;#39;utiliser sous un autre système. Mais il est désormais possible de s&amp;#39;en passer sous OSX.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;Hypervisor.framework&lt;/h2&gt;

&lt;p&gt;La version 10.10 (Yosemite) d&amp;#39;OSX a introduit un système de virtualisation natif en mode utilisateur et permet l&amp;#39;utilisation directe des instructions VT-x des processeurs Intel. Cela permet donc de virtualiser des applications, sans extension du noyau.&lt;/p&gt;

&lt;p&gt;D&amp;#39;ailleurs, &lt;a href="http://veertu.com/"&gt;Veertu&lt;/a&gt;, récemment publié sur l&amp;#39;app store permet d&amp;#39;installer des VMs en utilisant l&amp;#39;hyperviseur natif d&amp;#39;OSX, explique bien cette différence.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Legacy Virt" src="http://veertu.com/test/wp-content/uploads/2015/10/legacy.svg" /&gt;
&lt;img alt="OSX Virt" src="http://veertu.com/test/wp-content/uploads/2015/10/new.svg" /&gt;&lt;/p&gt;

&lt;p&gt;Bien que Veertu propose l&amp;rsquo;&lt;a href="https://twitter.com/veertu_labs/status/687552097869533184"&gt;installation de boot2docker&lt;/a&gt; ce n&amp;#39;est pas de ce système dont je vais vous parler.&lt;/p&gt;

&lt;h2&gt;Xhyve et son driver docker-machine&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/mist64/xhyve"&gt;Xhyve&lt;/a&gt; s&amp;#39;appuie également sur l&amp;rsquo;&lt;em&gt;hypervisor.framework&lt;/em&gt; d&amp;#39;OSX et permet de virtualiser des systèmes linux et BSD tout comme il était possible de le faire avec Virtualbox, mais sans la lourdeur d&amp;#39;Oracle. Son installation est on ne peut plus simple dès lors que &lt;em&gt;homebrew&lt;/em&gt; est installé (&lt;em&gt;t&amp;#39;es un dev sous mac et t&amp;#39;as pas homebrew installé, nan mais all&amp;hellip;&lt;/em&gt; 😬) : &lt;code&gt;brew install xhyve&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mais là ou cela devient intéressant, c&amp;#39;est qu&amp;#39;il existe désormais un &lt;a href="https://github.com/zchee/docker-machine-driver-xhyve"&gt;driver xhyve pour docker-machine&lt;/a&gt; (celui de Virtualbox est utilisé par défaut si on n&amp;#39;en précise pas). L&amp;#39;installer est tout aussi simple : &lt;code&gt;brew install docker-machine-driver-xhyve&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Cela dit, je vous recommande chaudement de tout installer avec homebrew. J&amp;#39;avais des restes d&amp;#39;installation de &lt;strong&gt;docker-toolbox&lt;/strong&gt; et la création de la VM n&amp;#39;a pas fonctionné. Le mieux est donc de supprimer les binaires et de les réinstaller avec homebrew :&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install xhyve docker docker-machine docker-compose docker-machine-driver-xhyve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Au jour de rédaction de ce billet, voici les versions installées suite à cette commande :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xhyve-0.2.0&lt;/li&gt;
&lt;li&gt;docker-1.9.1_1&lt;/li&gt;
&lt;li&gt;docker-machine-0.5.6_1&lt;/li&gt;
&lt;li&gt;docker-compose-1.5.2&lt;/li&gt;
&lt;li&gt;docker-machine-driver-xhyve-0.2.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Création et démarrage de la VM&lt;/h2&gt;

&lt;p&gt;Pour installer et démarrer la VM docker, il suffit d&amp;#39;utiliser docker-machine avec le driver xhyve.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker-machine create dockerhost --driver xhyve
Running pre-create checks...
Creating machine...
(dockerhost) Copying /Users/bob/.docker/machine/cache/boot2docker.iso to /Users/bob/.docker/machine/machines/dockerhost/boot2docker.iso...
(dockerhost) Creating VM...
(dockerhost) Extracting vmlinuz64 and initrd.img from boot2docker.iso...
(dockerhost) /dev/disk2                                                 /Users/bob/.docker/machine/machines/dockerhost/b2d-image
(dockerhost) "disk2" unmounted.
(dockerhost) "disk2" ejected.
(dockerhost) Generating 20000MB disk image...
(dockerhost) created: /Users/bob/.docker/machine/machines/dockerhost/root-volume.sparsebundle
(dockerhost) Creating SSH key...
(dockerhost) Fix file permission...
(dockerhost) Generate UUID...
(dockerhost) Convert UUID to MAC address...
(dockerhost) Starting dockerhost...
(dockerhost) Waiting for VM to come online...
(dockerhost) Waiting on a pseudo-terminal to be ready... done
(dockerhost) Hook up your terminal emulator to /dev/ttys004 in order to connect to your VM
Waiting for machine to be running, this may take a few minutes...
(dockerhost) Getting to VM state...
Machine is running, waiting for SSH to be available...
Detecting operating system of created instance...
Detecting the provisioner...
Provisioning with boot2docker...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Docker is up and running!
To see how to connect Docker to this machine, run: docker-machine env dockerhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il suffit ensuite de raccrocher l&amp;#39;environnement local à la nouvelle VM docker :&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ eval "$(docker-machine env dockerhost)"
$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
$ docker run --rm busybox echo 'plop!
latest: Pulling from library/busybox
583635769552: Pull complete
b175bcb79023: Pull complete
Digest: sha256:c1bc9b4bffe665bf014a305cc6cf3bca0e6effeb69d681d7a208ce741dad58e0
Status: Downloaded newer image for busybox:latest
plop!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et voilà, vous pouvez effacer votre stack Virtualbox ! Bon, peut-être pas tout de suite car ceci est encore plutôt expérimental, aussi je vais éprouver la solution dans les jours/semaines qui viennent, et ce sera l&amp;#39;occasion d&amp;#39;un prochain billet pour évalauer les performances et la fiabilité de la &lt;em&gt;stack&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;Edit du 25/01/2016&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;La source de cet essai est un blog post d&amp;rsquo;&lt;a href="https://allysonjulian.com/setting-up-docker-with-xhyve/"&gt;Allyson Julian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Si vous voulez utiliser des volumes partagés avec l&amp;#39;hôte (pas la VM, mais bien l&amp;#39;hôte OSX), il faut ajouter à l&amp;#39;installation de la VM le flag &lt;code&gt;--xhyve-experimental-nfs-share&lt;/code&gt;, sinon ça ne fonctionne pas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bon &lt;em&gt;hacking&lt;/em&gt; !&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Comportement des touches Home et End du pavé numérique sous OSX</title>
    <link rel="alternate" href="https://bobmaerten.eu/blog/comportement-des-touches-home-et-end-du-pave-numerique-sous-osx.html"/>
    <id>https://bobmaerten.eu/blog/comportement-des-touches-home-et-end-du-pave-numerique-sous-osx.html</id>
    <published>2015-06-26T17:23:10+02:00</published>
    <updated>2015-11-08T12:29:14+01:00</updated>
    <author>
      <name>Bob Maerten — Blog Perso</name>
    </author>
    <content type="html">&lt;p&gt;Le truc qui me rendait fous depuis mon passage sous OSX c&amp;#39;était le comportement des touches &lt;code&gt;Home&lt;/code&gt; et &lt;code&gt;End&lt;/code&gt; du pavé numérique. En tant que développeur, dans mon éditeur de texte, le comportement est d&amp;#39;aller respectivement en début et en fin de ligne. Or dans le navigateur et en particulier dans les &lt;em&gt;textarea&lt;/em&gt; de GitHub, le comportement des touches en question est rattaché au &lt;em&gt;viewport&lt;/em&gt; du navigateur. Si bien que lorsque naturellement j&amp;#39;appuie sur &lt;code&gt;Home&lt;/code&gt; pour revenir en début de ligne, mon navigateur me renvoyait en début de page.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="Rage" src="http://media.giphy.com/media/wvQIqJyNBOCjK/giphy.gif" /&gt;&lt;/p&gt;

&lt;p&gt;Mais en fouillant un peu, ce comportement ne semble pas naturel pour pas de gens, qui pour le coup installent un outil appelé &lt;a href="https://pqrs.org/osx/karabiner/"&gt;Karabiner&lt;/a&gt;, permettant de modifier le comportement du clavier en général.&lt;/p&gt;

&lt;p&gt;Cependant le comportement modifié rentrait en conflit avec ma configuration sous iTerm2, ce n&amp;#39;était donc pas mieux.&lt;/p&gt;

&lt;p&gt;Au final, c&amp;#39;est dans &lt;a href="http://www.evansweb.info/2005/03/24/mac-os-x-and-home-end-keys/"&gt;un billet&lt;/a&gt; du &lt;a href="http://www.evansweb.info/"&gt;blog de Jon Evans&lt;/a&gt; datant de plus de 10 que je trouve une solution simple, rapide, parfaitement adaptée et toujours valide&amp;nbsp;! Le site ne semble plus alimenté depuis quelques années mais est toujours dispo, chapeau bas &lt;a href="https://twitter.com/burmasauce"&gt;@burmasauce&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Toujours est-il que la solution est de créer un fichier &lt;code&gt;~/Library/KeyBindings/DefaultKeyBinding.dict&lt;/code&gt; contenant&amp;nbsp;:&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Remap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Home&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;End&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;correct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:-)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;"\UF729"&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"moveToBeginningOfLine:"&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Home&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;"\UF72B"&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"moveToEndOfLine:"&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;End&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;"$\UF729"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"moveToBeginningOfLineAndModifySelection:"&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Shift&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Home&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;"$\UF72B"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"moveToEndOfLineAndModifySelection:"&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Shift&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;End&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;et de redémarrer une nouvelle session afin de retrouver un niveau de santé mentale viable.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Quelques déboires avec le webservice de Prestashop</title>
    <link rel="alternate" href="https://bobmaerten.eu/blog/quelques-deboires-avec-le-webservice-de-prestashop.html"/>
    <id>https://bobmaerten.eu/blog/quelques-deboires-avec-le-webservice-de-prestashop.html</id>
    <published>2015-06-17T21:15:39+02:00</published>
    <updated>2015-11-08T12:29:14+01:00</updated>
    <author>
      <name>Bob Maerten — Blog Perso</name>
    </author>
    <content type="html">&lt;p&gt;Tiens il y avait un moment que je n&amp;#39;avais pas écrit par ici, et une fois n&amp;#39;est pas coutume il s&amp;#39;agit d&amp;#39;un billet pour évacuer. C&amp;#39;est Prestashop qui va en prendre pour son grade. Eh oui, Prestashop. Car même si mon activité principale est d&amp;#39;évoluer avec Ruby on Rails, il arrive à l&amp;#39;occasion que l&amp;#39;on doivent explorer d&amp;#39;autres univers.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Dans le cadre du boulot nous devons actuellement interfacer un &lt;em&gt;backoffice&lt;/em&gt; maison avec un &lt;em&gt;front-end&lt;/em&gt; Prestashop. Pour cela, nous avons pris le parti d&amp;#39;utiliser au maximum l&amp;#39;API REST de l&amp;#39;outil. Celle-ci est assez bien fichue car elle permet non seulement d&amp;#39;accéder aux principaux éléments de la boutique (produits, commandes, clients, stocks, etc.) mais également de les modifier. Et c&amp;#39;est sur ces mises à jour que s&amp;#39;est déversé la rage que je tente d&amp;#39;évacuer ici…&lt;/p&gt;

&lt;p&gt;J&amp;#39;avais des erreurs 500 qui se déclenchaient lors de mes tentatives de mise à jours via le webservice, mais rien d&amp;#39;autre. Les retours des appels HTTP se contentaient de préciser d&amp;#39;aller voir les logs, dans lesquels il n&amp;#39;y avait bien évidemment rien, malgré un paramétrage de PHP/Apache plutôt verbeux.&lt;/p&gt;

&lt;p&gt;Il faut savoir que les appels à l&amp;#39;API ne sont pas verbeux par défaut, et il m&amp;#39;a fallu longuement chercher pour comprendre et forcer le système de verbosité du webservice de Prestashop. J&amp;#39;ai clairement perdu les réflexes et les usages des applications PHP, et surtout travaillant avec Rails, on s&amp;#39;habitue vite aux environnements bien isolés et proprement déclarés (merci &lt;code&gt;RAKE_ENV/RAILS_ENV&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Par convention les valeurs permettant de contrôler le comportement de Prestashop sont à modifier dans &lt;code&gt;config/settings.inc.php&lt;/code&gt;. Or pour la verbosité des messages d&amp;#39;erreurs du webservice, il faut forcer dans &lt;code&gt;config/defines.inc.php&lt;/code&gt; la variable &lt;code&gt;_PS_MODE_DEV_&lt;/code&gt; à &lt;strong&gt;true&lt;/strong&gt; par que dans celui dans lequel on s&amp;#39;attend à ce que ça fonctionne, eh bien, ça ne fonctionne pas. Et je passe sur le fait de devoir fonctionner en mode &lt;code&gt;DEV&lt;/code&gt; pour avoir les messages d&amp;#39;erreurs de l&amp;#39;API. Eh donc ça veut dire qu&amp;#39;en prod, tu dois tourner en mode dev aussi&amp;nbsp;?!&lt;/p&gt;

&lt;p&gt;D&amp;#39;autre part, la consigne dans les documentations du webservice stipulent bien que pour la modification d&amp;#39;une ressource il faut d&amp;#39;abord récupérer le contenu XML via le webservice pour le renvoyer selon le même format avec les modifications. Cela ne fonctionnait pas sur certaines ressources (stock, produits, etc.) mais par manque de verbosité des messages il était délicat de comprendre pourquoi.&lt;/p&gt;

&lt;p&gt;Avec des messages plus “clairs” sur la mise à jour du stock comme : “Vous ne pouvez pas mettre à jour le stock disponible quand il dépend du stock”, ce n&amp;#39;est pas forcément beaucoup plus évident, mais en l&amp;#39;occurrence l&amp;#39;idée est ici de modifier non seulement la valeur de quantité mais également la valeur de &lt;code&gt;depends_on_stock&lt;/code&gt;. Je n&amp;#39;aurais jamais trouvé sans l&amp;#39;affichage de ces messages d&amp;#39;erreurs&amp;nbsp;!&lt;/p&gt;

&lt;p&gt;D&amp;#39;autres sont plus mystérieux dans la mesure ou il faut supprimer des lignes pour que la validation de la ressource s&amp;#39;effectue correctement. Ce n&amp;#39;est bien évidemment pas précisé dans la documentation, uniquement sur ces fichus messages d&amp;#39;erreur. Pour la mise à jour d&amp;#39;un produit par exemple&amp;nbsp;: “&lt;em&gt;parameter &lt;code&gt;manufacturer_name&lt;/code&gt; not writable. Please remove this attribute of this XML&lt;/em&gt;”, signifie qu&amp;#39;il faut supprimer le paramètre spécifié dans le XML passé (et &lt;code&gt;quantity&lt;/code&gt; également au passage, message qui n&amp;#39;apparaît qu&amp;#39;à la tentative suivante…). Bref, tout cela va peut-être sans dire pour les habitués du &lt;em&gt;framework&lt;/em&gt;, mais ça va tout de même mieux en le disant.&lt;/p&gt;

&lt;p&gt;Déjà que j&amp;#39;étais pas fan de XML, mais là, devoir le triturer pour pouvoir mettre à jour des données, c&amp;#39;était le pompon. Heureusement qu&amp;#39;il y a des &lt;em&gt;libs&lt;/em&gt; qui font ça à peu près bien, mais tout ça reste du XML et quelque part, pas franchement naturel à utiliser.&lt;/p&gt;

&lt;p&gt;Allez, on va dire que c&amp;#39;était un mauvais moment à passer. Jusqu&amp;#39;à la prochaine mise à jour de l&amp;#39;API… 😬&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Passage de boot2docker à docker-machine</title>
    <link rel="alternate" href="https://bobmaerten.eu/blog/passage-de-boot2docker-a-docker-machine.html"/>
    <id>https://bobmaerten.eu/blog/passage-de-boot2docker-a-docker-machine.html</id>
    <published>2015-05-17T13:12:14+02:00</published>
    <updated>2015-11-08T12:29:14+01:00</updated>
    <author>
      <name>Bob Maerten — Blog Perso</name>
    </author>
    <content type="html">&lt;p&gt;Entre mon nouveau job, mon passage à OSX pour le boulot, et la défaillance de mon portable sous Linux, j&amp;#39;ai eu peu de temps à consacrer à l&amp;#39;actualité de Docker. Cependant ça bouge pas mal ces derniers temps avec des projets comme &lt;a href="https://docs.docker.com/machine/"&gt;machine&lt;/a&gt;, &lt;a href="https://docs.docker.com/compose/"&gt;compose&lt;/a&gt; et &lt;a href="https://docs.docker.com/swarm/"&gt;swarm&lt;/a&gt; et j&amp;#39;ai récemment essayé de rattraper un peu le retard. Dans ce billet je vais exposer ma découverte de &lt;code&gt;docker-machine&lt;/code&gt; qui m&amp;#39;a permis de retrouver l&amp;#39;usage courant que j&amp;#39;avais de docker sous Linux.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;Boot2Docker&lt;/h2&gt;

&lt;p&gt;Comme un bon OSXien bien élevé au grain, j&amp;#39;ai tout d&amp;#39;abord suivi les conseils du net en installant &lt;a href="https://github.com/boot2docker/boot2docker"&gt;boot2docker&lt;/a&gt; pour faire fonctionner docker sous forme d&amp;#39;une VM Linux sous VirtualBox. La procédure est très simple&amp;nbsp;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew cask install virtualbox
$ brew install boot2docker
$ boot2docker up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Les recettes installent les dernières versions des logiciels requis. &lt;code&gt;boot2docker&lt;/code&gt; est au final un executable permettant de lancer/stopper/mettre à jour la VM en suivant les mises à jour de docker. Jusque là tout va bien, on parvient même à oublier la présence de cette VM et il m&amp;#39;est arrivé de chercher la cause de l&amp;#39;absence d&amp;#39;un service web en appelant &lt;code&gt;http://localhost:&amp;lt;service_port&amp;gt;&lt;/code&gt; au lieu de &lt;code&gt;http://&amp;lt;boot2docker_ip&amp;gt;:&amp;lt;service_port&amp;gt;&lt;/code&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;Il existe certes quelques soucis de performances inhérents à l&amp;#39;usage de VirtualBox qui n&amp;#39;est pas par définition très véloce sur les systèmes de fichiers. Celà dit pour un usage en développent ce n&amp;#39;est pas très ennuyeux, et il existe des &lt;a href="http://blog.blackfire.io/how-we-use-docker.html"&gt;solutions de contournement&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Docker Machine&lt;/h2&gt;

&lt;p&gt;Dernièrement, le sous-projet &lt;code&gt;machine&lt;/code&gt; est arrivé chez Docker permettant de faire la même chose mais avec la possibilité d&amp;#39;utiliser différents &lt;em&gt;drivers&lt;/em&gt;. En fonction du &lt;em&gt;driver&lt;/em&gt; utilisé &lt;code&gt;machine&lt;/code&gt; va installer un système d&amp;#39;exploitation permettant d&amp;#39;utiliser docker sur la cible indiquée. Cette cible pouvant être un fournisseur de ressources sur le &lt;em&gt;cloud&lt;/em&gt; ou votre propre installation VirtualBox locale.&lt;/p&gt;

&lt;p&gt;L&amp;#39;intérêt évident ici est de permettre d&amp;#39;utiliser les mêmes commandes et d&amp;#39;acquérir les mêmes habitudes quel que soit l&amp;#39;environnement cible que l&amp;#39;on manipule (dev, staging, prod) et quelque soit le service utilisé (VirtualBox, service Cloud, voire en développant son propre &lt;em&gt;driver&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Pour répliquer l&amp;#39;environnement boot2docker, il suffit donc d&amp;#39;installer &lt;code&gt;docker-machine&lt;/code&gt; ou de suivre les &lt;a href="https://docs.docker.com/machine/#installation"&gt;consignes d&amp;#39;installation&lt;/a&gt; du site officiel. Dès lors, &lt;code&gt;machine&lt;/code&gt; va télécharger au besoin la dernière version de l&amp;#39;iso de &lt;em&gt;boot2docker&lt;/em&gt; et déployer une nouvelle VM sous VirtualBox, exactement de la même manière que le processus “natif” de boot2docker.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install docker-machine
$ docker-machine create --driver virtualbox dev
INFO[0000] Creating SSH key...
INFO[0000] No default boot2docker iso found locally, downloading the latest release...
INFO[0001] Downloading latest boot2docker release to /Users/bob/.docker/machine/cache/boot2docker.iso...
INFO[0044] Creating VirtualBox VM...
INFO[0051] Starting VirtualBox VM...
INFO[0051] Waiting for VM to start...
INFO[0103] 'dev' has been created and is now the active machine.
INFO[0103] To point your Docker client at it, run this in your shell: eval '$(docker-machine env dev)'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remarquez la dernière ligne qui est assez importante. Lancer &lt;code&gt;eval &amp;#39;$(docker-machine env dev)&amp;#39;&lt;/code&gt; permet en effet de paramétrer le &lt;em&gt;shell&lt;/em&gt; courant pour permettre d&amp;#39;utiliser l&amp;#39;environnement choisi avec les outils docker.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ eval '$(docker-machine env dev)'

$ docker info
Containers: 0
Images: 0
Storage Driver: aufs
Root Dir: /mnt/sda1/var/lib/docker/aufs
Backing Filesystem: extfs
Dirs: 0
Dirperm1 Supported: true
Execution Driver: native-0.2
Kernel Version: 4.0.3-boot2docker
Operating System: Boot2Docker 1.6.2 (TCL 5.4); master : 4534e65 - Wed May 13 21:24:28 UTC 2015
CPUs: 8
Total Memory: 997.3 MiB
Name: dev
[...]
Labels:
 provider=virtualbox

$ docker run busybox echo Hello World
Unable to find image 'busybox:latest' locally
latest: Pulling from busybox
cf2616975b4a: Pull complete
6ce2e90b0bc7: Pull complete
8c2e06607696: Already exists
busybox:latest: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.
Digest: sha256:38a203e1986cf79639cfb9b2e1d6e773de84002feea2d4eb006b52004ee8502d
Status: Downloaded newer image for busybox:latest
Hello World

$ docker ps -a
CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS                      PORTS               NAMES
d289f3082caf        busybox:latest      'echo Hello World'   11 seconds ago      Exited (0) 11 seconds ago                       drunk_pare
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et comme je le disais plus haut, le &lt;em&gt;workflow&lt;/em&gt; est exactement le même en utilisant un autre &lt;em&gt;driver&lt;/em&gt;&amp;nbsp;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker-machine create --driver digitalocean --digitalocean-access-token=$MY_ACCESS_TOKEN docker-prod
INFO[0000] Creating SSH key...
INFO[0001] Creating Digital Ocean droplet...
INFO[0201] 'docker-prod' has been created and is now the active machine.
INFO[0201] To point your Docker client at it, run this in your shell: eval '$(docker-machine env docker-prod)'

$ eval '$(docker-machine env docker-prod)'

$ docker run busybox echo Hello World
Unable to find image 'busybox:latest' locally
latest: Pulling from busybox
cf2616975b4a: Pull complete
6ce2e90b0bc7: Pull complete
8c2e06607696: Already exists
busybox:latest: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.
Digest: sha256:38a203e1986cf79639cfb9b2e1d6e773de84002feea2d4eb006b52004ee8502d
Status: Downloaded newer image for busybox:latest
Hello World

$ docker ps -a
CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS                     PORTS               NAMES
7b8b283fceaa        busybox:latest      'echo Hello World'   11 seconds ago      Exited (0) 9 seconds ago                       gloomy_bohr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et ces deux environnements sont désormais accessibles en permuttant d&amp;#39;une cible à l&amp;#39;autre avec la commande &lt;code&gt;eval&lt;/code&gt; indiquée au démarrage d&amp;#39;une machine&amp;nbsp;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker-machine ls
NAME          ACTIVE   DRIVER         STATE     URL                         SWARM
dev                    virtualbox     Running   tcp://192.168.99.102:2376
docker-prod   *        digitalocean   Running   tcp://45.55.254.233:2376

$ eval '$(docker-machine env dev)'

$ docker ps -a
CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS                      PORTS               NAMES
d289f3082caf        busybox:latest      'echo Hello World'   2 minutes ago       Exited (0) 2 minutes ago                        drunk_pare
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Accéder aux containers depuis l&amp;#39;hôte&lt;/h2&gt;

&lt;p&gt;Il y avait encore quelque chose qui me gênait dans l&amp;#39;usage d&amp;#39;une VM pour Docker en local, c&amp;#39;est l&amp;#39;accès aux containers directement depuis ma machine. Sous linux, Docker est exposé sur une interface routée par défaut. Avec une VM sous VirtualBox, il faut déclarer la route manuellement&amp;nbsp;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ /usr/sbin/scutil -w State:/Network/Interface/vboxnet0/IPv4 -t 0

$ sudo /sbin/route -n add -net 172.17.0.0 -netmask 255.255.0.0 -gateway $(docker-machine ip)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut ainsi créer un &lt;em&gt;container&lt;/em&gt; et le &lt;em&gt;ping&lt;/em&gt;er depuis le système local.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run --name=redis -d redis

$ ping -c 3 $(docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(docker ps -ql))
PING 172.17.0.1 (172.17.0.1): 56 data bytes
64 bytes from 172.17.0.1: icmp_seq=0 ttl=63 time=3.164 ms
64 bytes from 172.17.0.1: icmp_seq=1 ttl=63 time=3.985 ms
64 bytes from 172.17.0.1: icmp_seq=2 ttl=63 time=9.379 ms

--- 172.17.0.1 ping statistics ---
3 packets transmitted, 3 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 3.164/5.509/9.379/2.757 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette manipulation ne résistant pas au reboot, sous OSX on peut ajouter un &lt;code&gt;plist&lt;/code&gt; pour remettre la route au démarrage de la machine. Il faut toutefois faire attention à quel &lt;em&gt;vboxnet&lt;/em&gt; est rattaché la VM et quelle est l&amp;#39;ip attribuée par VirtualBox&amp;nbsp;:&lt;/p&gt;

&lt;p&gt;Voici le plist (&lt;code&gt;/Library/LaunchDaemons/com.docker.route.plist&lt;/code&gt;) pour ma VM sur le vboxnet0 et d&amp;#39;adresse IP 192.168.99.100&lt;/p&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE plist PUBLIC '-//Apple//DTD PLIST 1.0//EN' 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;plist&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;'1.0'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.docker.route&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;bash&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;-c&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- You need to adapt the vboxnet0 to the interface that suits your setup, use ifconfig to find it --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/usr/sbin/scutil -w State:/Network/Interface/vboxnet0/IPv4 -t 0;sudo /sbin/route -n add -net 172.17.0.0 -netmask 255.255.0.0 -gateway 192.168.99.100&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;KeepAlive&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;false/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RunAtLoad&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;LaunchOnlyOnce&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Bonus: accéder aux containers par un nom DNS&lt;/h2&gt;

&lt;p&gt;Le top du top serait d&amp;#39;avoir un système qui permet d&amp;#39;accéder aux conteneurs créés par leur nom plutôt que par un IP ou une redirection de port. On trouve pas mal de projets liés à cette problèmatique sur github, mais celui qui a retenu mon attention est &lt;a href="https://github.com/tonistiigi/dnsdock"&gt;dnsdock&lt;/a&gt;. Il s&amp;#39;appuie sur les recherches d&amp;rsquo;&lt;a href="http://www.asbjornenge.com/wwc/vagrant_skydocking.html"&gt;autres&lt;/a&gt; &lt;a href="https://github.com/tonistiigi/dnsdock"&gt;projet&lt;/a&gt;, mais il a pour lui la simplicité que je recherchais à la fois dans son installation et son utilisation.&lt;/p&gt;

&lt;p&gt;Dans un premier temps il suffit de lancer un conteneur qui va repérer la création/suppression d&amp;#39;autre conteneur et enregistrer leurs nom dans un service DNS&amp;nbsp;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run -d -v /var/run/docker.sock:/var/run/docker.sock --name dnsdock --restart=always -p 172.17.42.1:53:53/udp tonistiigi/dnsdock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notez l&amp;#39;utilisation &lt;code&gt;--restart=always&lt;/code&gt; permettant de recharger le container au redémarrage de la VM.&lt;/p&gt;

&lt;p&gt;Ensuite, il suffit d&amp;#39;ajouter un &lt;code&gt;resolver&lt;/code&gt; à OSX pour résoudre les noms des conteneurs avec le suffixe &lt;code&gt;.docker&lt;/code&gt; (voir la documentation de dnsdock pour un paramétrage différent).&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo mkdir -p /etc/resolver ; echo 'nameserver 172.17.42.1' | sudo tee /etc/resolver/docker

$ ping redis.docker
PING redis.docker (172.17.0.2): 56 data bytes
64 bytes from 172.17.0.2: icmp_seq=0 ttl=63 time=2.256 ms
64 bytes from 172.17.0.2: icmp_seq=1 ttl=63 time=5.212 ms
64 bytes from 172.17.0.2: icmp_seq=2 ttl=63 time=2.228 ms

--- redis.docker ping statistics ---
3 packets transmitted, 3 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 2.228/3.232/5.212/1.400 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A priori il est possible de faire la même chose sous Linux en ajoutant l&amp;#39;adresse de &lt;em&gt;bridge&lt;/em&gt; au fichier &lt;code&gt;/etc/resolv.conf&lt;/code&gt; en tant que &lt;em&gt;resolver&lt;/em&gt;, mais n&amp;#39;en ayant plus sous la main je ne peux donner de mode opératoire. L&amp;#39;utilisation d&amp;#39;une autre image comme &lt;a href="https://github.com/iverberk/docker-spy"&gt;docker-spy&lt;/a&gt; pourrait être opportune également.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Voilà, j&amp;#39;ai désormais de quoi faire tourner des conteneurs Docker de manière pas trop douloureuse sous OSX, mais entre boot2docker et docker-machine alors, comment choisir&amp;nbsp;? Les moins de 40 ans ne comprendront surement pas l&amp;#39;allusion mais voici ma petite recette pour choisir.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Pub FLUOGUM" src="http://i.imgur.com/QkkmmIs.png" /&gt;&lt;/p&gt;

&lt;p&gt;À ma gauche un &lt;em&gt;host&lt;/em&gt; qui tourne sous boot2docker.&lt;/p&gt;

&lt;p&gt;À ma droite mon &lt;em&gt;host&lt;/em&gt; qui tourne sous docker-machine.&lt;/p&gt;

&lt;p&gt;A priori c&amp;#39;est la même chose, mais ce n&amp;#39;est pas la même chose !&lt;/p&gt;

&lt;p&gt;Car dans mon host, y&amp;#39;a du docker-machine,&lt;/p&gt;

&lt;p&gt;et ♫ “docker-machine, c&amp;#39;est bon pour &lt;a href="https://twitter.com/icecrime/status/599928881953443840"&gt;créer et switcher d&amp;#39;environnement&lt;/a&gt;&amp;nbsp;!”&lt;/p&gt;
</content>
  </entry>
</feed>
